%implements s5_b0_77j9e_Functions "C"

%function rt_invd3x3_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
real_T x[9];
int32_T zero;
int32_T three;
int32_T six;
int32_T p;
real_T absx;
real_T absx_0;
real_T absx_1;
real_T t;
boolean_T guard = FALSE;
memcpy((void *)&x[0], (void *)&u[0], 9U * sizeof(real_T));
three = 3;
six = 6;
p = -1;
absx = muDoubleScalarAbs(u[0]);
absx_0 = muDoubleScalarAbs(u[1]);
absx_1 = muDoubleScalarAbs(u[2]);
if (absx_0 > absx) {
    if (absx_0 > absx_1) {
        p = 2;
        three = 0;
        x[0] = u[1];
        x[1] = u[0];
        t = x[3];
        x[3] = x[4];
        x[4] = t;
        t = x[6];
        x[6] = x[7];
        x[7] = t;
    } else {
        guard = TRUE;
    }
} else {
    guard = TRUE;
}
if (guard && (absx_1 > absx)) {
    p = 5;
    six = 0;
    t = x[0];
    x[0] = x[2];
    x[2] = t;
    t = x[3];
    x[3] = x[5];
    x[5] = t;
    t = x[6];
    x[6] = x[8];
    x[8] = t;
}
x[1] /= x[0];
x[2] /= x[0];
x[4] -= x[1] * x[3];
x[5] -= x[2] * x[3];
x[7] -= x[1] * x[6];
x[8] -= x[2] * x[6];
if (muDoubleScalarAbs(x[5]) > muDoubleScalarAbs(x[4])) {
    zero = three;
    three = six;
    six = zero;
    t = x[1];
    x[1] = x[2];
    x[2] = t;
    t = x[4];
    x[4] = x[5];
    x[5] = t;
    t = x[7];
    x[7] = x[8];
    x[8] = t;
}
x[5] /= x[4];
x[8] -= x[5] * x[7];
absx_0 = (x[5] * x[1] - x[2]) / x[8];
t = -(x[7] * absx_0 + x[1]) / x[4];
y[p + 1] = ((1.0 - x[3] * t) - x[6] * absx_0) / x[0];
y[p + 2] = t;
y[p + 3] = absx_0;
absx_0 = -x[5] / x[8];
t = (1.0 - x[7] * absx_0) / x[4];
y[three] = -(x[3] * t + x[6] * absx_0) / x[0];
y[three + 1] = t;
y[three + 2] = absx_0;
absx_0 = 1.0 / x[8];
t = -x[7] * absx_0 / x[4];
y[six] = -(x[3] * t + x[6] * absx_0) / x[0];
y[six + 1] = t;
y[six + 2] = absx_0;
%closefile fcnBuff
%return fcnBuff
%endfunction

%function rt_mrdivide_U1d1x3_U2d3x3_Yd1x3_snf_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
real_T A[9];
real_T A_0[9];
int32_T TWO;
int32_T THREE;
int32_T r;
int32_T r_0;
real_T maxval;
real_T a;
for (THREE = 0; THREE < 3; THREE++) {
    A[3 * THREE] = u1[THREE];
    A[1 + 3 * THREE] = u1[THREE + 3];
    A[2 + 3 * THREE] = u1[THREE + 6];
}
memcpy((void *)&A_0[0], (void *)&A[0], 9U * sizeof(real_T));
THREE = 2;
r = 0;
r_0 = 1;
maxval = muDoubleScalarAbs(A[0]);
a = muDoubleScalarAbs(A[1]);
if (a > maxval) {
    maxval = a;
    r = 1;
    r_0 = 0;
}
if (muDoubleScalarAbs(A[2]) > maxval) {
    r = 2;
    r_0 = 1;
    THREE = 0;
}
A_0[r_0] = A[r_0] / A[r];
A_0[THREE] /= A_0[r];
A_0[3 + r_0] -= A_0[3 + r] * A_0[r_0];
A_0[3 + THREE] -= A_0[3 + r] * A_0[THREE];
A_0[6 + r_0] -= A_0[6 + r] * A_0[r_0];
A_0[6 + THREE] -= A_0[6 + r] * A_0[THREE];
if (muDoubleScalarAbs(A_0[3 + THREE]) > muDoubleScalarAbs(A_0[3 + r_0])) {
    TWO = r_0 + 1;
    r_0 = THREE;
    THREE = TWO - 1;
}
A_0[3 + THREE] /= A_0[3 + r_0];
A_0[6 + THREE] -= A_0[3 + THREE] * A_0[6 + r_0];
maxval = u0[r_0] - u0[r] * A_0[r_0];
a = ((u0[THREE] - u0[r] * A_0[THREE]) - A_0[3 + THREE] * maxval) / A_0[6 + THREE];
maxval -= A_0[6 + r_0] * a;
maxval /= A_0[3 + r_0];
y[0] = ((u0[r] - A_0[6 + r] * a) - A_0[3 + r] * maxval) / A_0[r];
y[1] = maxval;
y[2] = a;
%closefile fcnBuff
%return fcnBuff
%endfunction

%function Outputs_Fcn2Call0Arg0(block) void
%assign argBuff = ""
%openfile argBuff
%<(SLibCG_BOVAddr(22, 0, 5, 9, "", -1, "", 0))>\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call0Arg1(block) void
%assign argBuff = ""
%openfile argBuff
mm4mkpkz3a\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call1Arg0(block) void
%assign argBuff = ""
%openfile argBuff
tmp\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call1Arg1(block) void
%assign argBuff = ""
%openfile argBuff
%<(SLibCG_BOVAddr(45, 0, 5, 9, "", -1, "", 0))>\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call1Arg2(block) void
%assign argBuff = ""
%openfile argBuff
%<(SLibCG_BOVAddr(46, 0, 5, 3, "", -1, "", 0))>\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call2Arg0(block) void
%assign argBuff = ""
%openfile argBuff
tmp\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call2Arg1(block) void
%assign argBuff = ""
%openfile argBuff
%<(SLibCG_BOVAddr(60, 0, 5, 9, "", -1, "", 0))>\
%closefile argBuff
%return argBuff
%endfunction

%function Outputs_Fcn2Call2Arg2(block) void
%assign argBuff = ""
%openfile argBuff
%<(SLibCG_BOVAddr(61, 0, 5, 3, "", -1, "", 0))>\
%closefile argBuff
%return argBuff
%endfunction

